<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Simon Dice</title>
    <link rel="stylesheet" href="./juego.css">
  </head>
  <body>
    <div class="gameboard">
      <div id="celeste" class="color celeste left" data-color="celeste"></div>
      <div id="violeta" class="color violeta right" data-color="violeta"></div>
      <div id="naranja" class="color naranja left" data-color="naranja"></div>
      <div id="verde" class="color verde right" data-color="verde"></div>
      <button id="btnEmpezar" class="btn-start" onclick="empezarJuego()">Empezar a jugar!</button>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-prompt21/1.1.1/jquery-prompt21.js"></script>
    <script>
        const celeste=document.getElementById('celeste')
        const violeta=document.getElementById('violeta')
        const naranja=document.getElementById('naranja')
        const verde=document.getElementById('verde')
        const btnEmpezar=document.getElementById('btnEmpezar')
        const ULTIMO_NIVEL=10

        class Juego {
            constructor(){
                this.inicializar=this.inicializar.bind(this)
                this.inicializar()
                this.generarSecuencia()
                setTimeout(this.siguienteNivel,500)
            }

            inicializar(){
                //Con .classList se accede a las clases en los estilos
                const dificultad=Number(prompt('Ingrese la dificultad de 1 a 5','Selección de dificultad'))
                switch(dificultad){
                    case 1: 
                        this.time=1500
                        break;
                    case 2:
                        this.time=1000
                        break;
                    case 3:
                        t--his.time=650
                        break;
                    case 4:
                        this.time=350
                        break;
                    case 5: 
                        this.time=75
                        break;
                    default: swal('¡Cuidado!','Ingresa un valor entre 1 y 5','error')
                }
                this.siguienteNivel=this.siguienteNivel.bind(this)
                this.elegirColor=this.elegirColor.bind(this)
                this.toggleBtnEmpezar()
                this.nivel=1
                this.colores={
                    celeste,
                    violeta,
                    naranja,
                    verde
                }
            }

            toggleBtnEmpezar(){
                if(btnEmpezar.classList.contains('hide')){
                    btnEmpezar.classList.remove('hide')
                }else{
                    btnEmpezar.classList.add('hide')
                }
            }

            generarSecuencia(){
                //Se debe usar .fill porque el .map no actúa sobre elementos no definidos, almenos deben ser cero
                this.secuencia=new Array(ULTIMO_NIVEL).fill(0).map(n => Math.floor(Math.random()*4))
            }

            siguienteNivel(){
                this.subnivel=0
                this.iluminarSecuencia()
                this.agregarEventosClick()
            }

            transformarNumeroAColor(numero){
                switch(numero){
                    case 0:
                        return 'celeste'
                    case 1:
                        return 'violeta'
                    case 2:
                        return 'naranja'
                    case 3: 
                        return 'verde'
                }

            }

            transformarColorANumero(color){
                switch(color){
                    case 'celeste':
                        return 0
                    case 'violeta':
                        return 1
                    case 'naranja':
                        return 2
                    case 'verde': 
                        return 3
                }

            }

            iluminarSecuencia(){
                for (let i=0; i<this.nivel;i++){
                    const color=this.transformarNumeroAColor(this.secuencia[i])
                    setTimeout(()=>this.iluminarColor(color),this.time*i)
                }
            }

            iluminarColor(color){
                this.colores[color].classList.add('light')
                setTimeout(()=>this.apagarColor(color),350)
            }

            apagarColor(color){
                this.colores[color].classList.remove('light')
            }

            agregarEventosClick(){
                this.colores.celeste.addEventListener('click',this.elegirColor)
                this.colores.verde.addEventListener('click',this.elegirColor)
                this.colores.violeta.addEventListener('click',this.elegirColor)
                this.colores.naranja.addEventListener('click',this.elegirColor)
            }

            eliminarEventosClick(){
                this.colores.celeste.removeEventListener('click',this.elegirColor)
                this.colores.verde.removeEventListener('click',this.elegirColor)
                this.colores.violeta.removeEventListener('click',this.elegirColor)
                this.colores.naranja.removeEventListener('click',this.elegirColor)

            }

            elegirColor(ev){
                const nombreColor=ev.target.dataset.color
                const numeroColor=this.transformarColorANumero(nombreColor)
                this.iluminarColor(nombreColor)
                if(numeroColor===this.secuencia[this.subnivel]){
                    this.subnivel++
                    if(this.subnivel===this.nivel){
                        this.nivel++
                        this.eliminarEventosClick()
                        if(this.nivel===(ULTIMO_NIVEL+1)){
                            this.ganoElJuego()
                        }else{
                            swal('¡Felicitaciones!','Has pasado el nivel ' + this.subnivel,'success')
                            setTimeout(this.siguienteNivel,2000)
                        }

                    }
                }else{
                    this.perdioElJuego()
                }
            }

            ganoElJuego(){
                swal('Platzi','¡Felicitaciones, has ganado el juego','success')
                .then(this.inicializar)
            }

            perdioElJuego(){
                swal('Platzi','¡Has perdido! Lo sentimos :(','error')
                .then(()=>{
                    this.eliminarEventosClick()
                    this.inicializar()
                })
            }

        }

        
        function empezarJuego(){
          var juego=new Juego()
      }
    </script>
  </body>
</html>